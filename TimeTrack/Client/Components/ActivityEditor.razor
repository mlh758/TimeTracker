@using TimeTrack.Shared
@using TimeTrack.Shared.ViewModels
@using TimeTrack.Client.Components
@inject HttpClient Http

<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudTextField Required T="DateTime?" Format="yyyy-MM-dd" Label="Activity Date" InputType="InputType.Date" @bind-Value="Model.Start" />
    <MudTextField Required T="decimal?" Label="Clinical Hours" InputType="InputType.Number" @bind-Value="Model.ClinicalHours" InputMode="InputMode.numeric" UserAttributes="@(new Dictionary<string, object>() { ["step"] = "0.25" })" />

    @if (loading)
    {
        <MudSkeleton Width="100%" Height="4.2rem" />
        <MudSkeleton Width="100%" Height="4.2rem" />
        <MudSkeleton Width="100%" Height="4.2rem" />
    }
    else
    {
        <MudSwitch T="bool" Label="This is a group activity" Checked="@isGroup" CheckedChanged="@OnIsGroupChange" Color="Color.Primary" />
        @if (isGroup)
        {   
            <MudAutocomplete T="ActivityOwner" Label="Choose Group" @bind-Value="Model.Group" SearchFunc="@SearchGroups" ToStringFunc="@(e=> e.Name)" Clearable ResetValueOnEmptyText />
        } else
        {
        <MudAutocomplete T="ActivityOwner" Label="Choose Client" @bind-Value="Model.Client" SearchFunc="@SearchClients" ToStringFunc="@(e=> e.Name)" Clearable ResetValueOnEmptyText />
        }
        <MudAutocomplete T="Assessment"
                     @ref="assessmentSearch"
                     Label="Choose Assessments"
                     SearchFunc="@SearchAssessments"
                     ToStringFunc="@(e=> e.Name)"
                     ValueChanged="OnAssessmentChosen"
                     Clearable
                     ResetValueOnEmptyText
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                     HelperText="Search for assessments" />

        @foreach (var a in Model.Assessments)
        {
            <MudChip Color="Color.Secondary" Variant="Variant.Outlined" OnClose="@(() => Model.Assessments.Remove(a))">
                <span class="chip-text">
                    @a.Name
                </span>
            </MudChip>
        }
        <section>
            <MudSwitch T="bool" Label="This is a recurring activity" Checked="@(Model.Schedule is not null)" CheckedChanged="@OnChangeSchedule" Color="Color.Primary" />
            @if (Model.Schedule is not null)
            {
                <ScheduleEditor Schedule="@Model.Schedule" />
            }
        </section>
    }

    <div class="mt-2">
        <ValidationSummary />
    </div>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-2">Save Activity</MudButton>
</EditForm>
@code {
    [Parameter, EditorRequired]
    public ActivityForm Model { get; set; } = null!;

    [Parameter]
    public EventCallback<ActivityForm> OnSubmit { get; set; }

    private ActivityOwner[]? clients;
    private ActivityOwner[]? groups;
    private Assessment[]? assessments;
    private bool loading = true;
    private bool isGroup = false;
    private MudAutocomplete<Assessment>? assessmentSearch;

    private void OnIsGroupChange(bool isChecked)
    {
        Model.Client = null;
        Model.Group = null;
        isGroup = isChecked;
    }

    private void OnChangeSchedule(bool isChecked)
    {
        if (isChecked)
        {
            Model.Schedule = new Schedule()
                {
                    EndSchedule = DateTime.Today.AddMonths(6),
                };
        }
        else
        {
            Model.Schedule = null;
        }
    }

    private async void OnAssessmentChosen(Assessment chosen)
    {
        // MudBlazor isn't handling nullable value types well. This would be Assessment? but with structs
        // it all goes very wrong. Instead checking if we got an empty struct by looking at chosen.Name
        if (!String.IsNullOrEmpty(chosen.Name))
        {
            Model.Assessments.Add(chosen);
        }
        if (assessmentSearch is not null)
        {
            await assessmentSearch.Clear();
            await assessmentSearch.BlurAsync();
        }
    }

    private async Task<IEnumerable<ActivityOwner>> SearchClients(string text)
    {
        await Task.Delay(0); // forcing this to be async I guess
        if (clients is null)
        {
            return new List<ActivityOwner>();
        }

        if (String.IsNullOrEmpty(text))
        {
            return clients;
        }

        return clients.Where(e => e.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<ActivityOwner>> SearchGroups(string text)
    {
        await Task.Delay(0);
        if (groups is null)
        {
            return new List<ActivityOwner>();
        }

        if (String.IsNullOrEmpty(text))
        {
            return groups;
        }

        return groups.Where(e => e.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Assessment>> SearchAssessments(string text)
    {
        await Task.Delay(0);
        if (assessments is null)
        {
            return new List<Assessment>();
        }

        var availableAssessments = assessments.Where(a => !Model.Assessments.Contains(a));

        if (String.IsNullOrEmpty(text))
        {
            return availableAssessments;
        }

        return availableAssessments.Where(e => e.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task OnValidSubmit()
    {
        await OnSubmit.InvokeAsync(Model);
    }

    protected override async Task OnInitializedAsync()
    {
        var clientsTask = Http.GetFromJsonAsync<ActivityOwner[]>("/api/Clients");
        var groupsTask = Http.GetFromJsonAsync<ActivityOwner[]>("/api/Groups");
        assessments = await Http.GetFromJsonAsync<Assessment[]>("/api/assessments");
        clients = await clientsTask;
        groups = await groupsTask;
        loading = false;
    }
}
