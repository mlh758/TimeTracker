@inject HttpClient Http
@inject IJSRuntime JS
@inject ILogger<RegisterDevice> Logger
@inject NavigationManager Nav
@implements IAsyncDisposable

<MudText Typo="Typo.h3">Register This Device</MudText>
<MudText Typo="Typo.caption">Use your face, fingerprint, or other <a href="https://fidoalliance.org/fido2/">FIDO2 device</a> to log in, instead of your password.</MudText>
<MudText Typo="Typo.caption">
    You will be prompted to save a passkey. On Android you will see several options. Choosing screen lock will let you log in similar to how you unlock your phone.
    On iOS choosing to save a passkey will use FaceID or Touch ID.
    You can read more about Webauthn <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API">here.</a>
</MudText>
<form>
    <MudTextField @bind-Value="@deviceName" Label="Device Name" HelperText="Name this device so that you can recognize it later in your account settings." Required />
    <div class="mt-2">
        <MudButton Disabled="@(data is null)" OnClick="@HandleRegister">Register!</MudButton>
        <MudButton Href="@ReturnTo">No thanks</MudButton>
    </div>
</form>
@if (registerError)
{
    <MudAlert Severity="Severity.Warning" ShowCloseIcon CloseIconClicked="@(() => registerError = false)">The registration ceremony failed. You may try again if that wasn't intentional.</MudAlert>
}

@code {
    [Parameter]
    public string ReturnTo { get; set; } = "/account/authenticators";
    private dynamic? data;
    private IJSObjectReference module;
    private bool registerError = false;
    private string? deviceName;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Components/RegisterDevice.razor.js");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        data = await Http.GetFromJsonAsync<dynamic>("/api/authenticators/new");
    }

    private async Task HandleRegister()
    {
        try
        {
            var credential = await module.InvokeAsync<object>("createCredential", new object[] { data! });
            var result = await Http.PostAsJsonAsync("/api/authenticators", new { Name = deviceName, Credential = credential});
            Nav.NavigateTo(ReturnTo);
        }
        catch (JSException e)
        {
            Logger.LogError(e.Message);
            Logger.LogError(e.StackTrace);
            registerError = true;
        }
    }
    public ValueTask DisposeAsync() => module.DisposeAsync();
}
