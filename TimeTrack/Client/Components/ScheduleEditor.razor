@using TimeTrack.Shared.ViewModels
@using TimeTrack.Shared.Enums
@inject ILogger<ScheduleEditor> logger

<section>
    <MudStack Spacing=2>
        <MudTextField Disabled="@Disabled" Required T="DateTime" Format="yyyy-MM-dd" Label="Stop Date" InputType="InputType.Date" @bind-Value="Schedule.EndSchedule" HelperText="Date to stop the recurring event, up to 1 year" />
        <MudSelect Disabled="@Disabled" Label="Frequency" @bind-Value="@Schedule.Frequency">
            <MudSelectItem Value="Frequency.Daily">Daily</MudSelectItem>
            <MudSelectItem Value="Frequency.Weekdays">Weekdays</MudSelectItem>
            <MudSelectItem Value="Frequency.Weekly">Weekly</MudSelectItem>
            <MudSelectItem Value="Frequency.Monthly">Monthly</MudSelectItem>
        </MudSelect>

        <MudTextField Disabled="@Disabled" Required T="ushort" Label="Interval" HelperText="Gap between events. For example, 2 for every other day" InputType="InputType.Number" @bind-Value="Schedule.Interval" />

        @if (Schedule.Frequency == Frequency.Weekly)
        {
            <MudText Typo="Typo.caption">Select days for this activity:</MudText>
            <MudButtonGroup Disabled="@Disabled" Class="d-none d-md-block">
                @foreach (var (i, day) in EachDay(Weekdays))
                {
                    <MudButton Class="@(WeekdayClass(i))" type="button" @onclick="() => HandleWeekdays(i)">@day</MudButton>
                }
            </MudButtonGroup>
            <MudButtonGroup Disabled="@Disabled" Class="d-md-none">
                @foreach (var (i, day) in EachDay(ShortWeekdays))
                {
                    <MudButton Class="@(WeekdayClass(i))" type="button" @onclick="() => HandleWeekdays(i)">@day</MudButton>
                }
            </MudButtonGroup>
        }
    </MudStack>
</section>

@code {
    [Parameter]
    public Schedule Schedule { get; set; } = new Schedule();

    [Parameter]
    public bool Disabled { get; set; }

    private List<string> Weekdays = new() { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private List<string> ShortWeekdays = new() { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };

    private IEnumerable<(int, string)> EachDay(IEnumerable<string> weekdays)
    {
        return Enumerable.Range(0, 7).Zip(weekdays);
    }

    private void HandleWeekdays(int i)
    {
        Schedule.DaysOfWeek = (byte)(Schedule.DaysOfWeek ^ (0b_1000_0000 >> i));
        logger.LogInformation("Called with {day}. Now {value}", i, Schedule.DaysOfWeek);
    }

    private string WeekdayClass(int i)
    {
        return ((0b_1000_0000 >> i) & Schedule.DaysOfWeek) != 0 ? "selected" : "";
    }
}
