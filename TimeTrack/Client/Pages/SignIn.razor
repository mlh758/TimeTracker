@page "/login"
@using System.ComponentModel.DataAnnotations;
@using System.Web;
@using TimeTrack.Client.Services;
@using TimeTrack.Shared;
@using TimeTrack.Shared.ViewModels;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthProvider Auth
@inject ILogger<SignIn> Logger
@inject IJSRuntime JS
@implements IAsyncDisposable


<PageTitle>Login</PageTitle>

<MudText Typo="Typo.h1">Login</MudText>
@if (badLoginError)
{
    <MudAlert Severity="Severity.Warning" ShowCloseIcon CloseIconClicked="@(() => badLoginError = false)">The username or password is incorrect. Do you need to <MudLink Href="/register">register?</MudLink></MudAlert>
}

@if (genericError)
{
    <MudAlert Severity="Severity.Error" ShowCloseIcon CloseIconClicked="@(() => genericError = false)">Something went wrong trying to log in. Please try again.</MudAlert>
}

@if (triedFido)
{
    <EditForm Model="@model" OnValidSubmit="AttemptPasswordLogin">
        <DataAnnotationsValidator />
        <MudTextField Label="Email" InputType="InputType.Email" InputMode="InputMode.email" @bind-Value="model.Email" Required />

        <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="model.Password" Required />
        <ValidationSummary />
        <MudButton Disabled="@isLoading" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-2">Login</MudButton>
    </EditForm>
}
else
{
    <EditForm Model="@model" OnSubmit="AttemptFidoLogin">
        <MudTextField Label="Email" InputType="InputType.Email" InputMode="InputMode.email" @bind-Value="model.Email" Required />

        <MudButton Disabled="@isLoading" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-2">Continue</MudButton>
    </EditForm>
}

@code {

    LoginForm model = new LoginForm();
    private bool triedFido = false;
    private bool isLoading = false;
    private bool genericError = false;
    private bool badLoginError = false;
    private IJSObjectReference module;

    async Task AttemptPasswordLogin()
    {
        isLoading = true;
        try
        {
            await Auth.Login(model);
            NavigationManager.NavigateTo("/");
        }
        catch (HttpRequestException e)
        {
            switch (e.StatusCode)
            {
                case System.Net.HttpStatusCode.Forbidden:
                    badLoginError = true;
                    break;
                case System.Net.HttpStatusCode.InternalServerError:
                    genericError = true;
                    break;
            }
        }
        finally
        {
            isLoading = false;
        }
    }
    /*
    * When the user hits Continue, we check if they already have an authenticator registered for this device. If so, try
    * to log them in with that instead of requiring a password. If it fails just fall back to password login.
    */
    private async Task AttemptFidoLogin()
    {
        try
        {
            isLoading = true;
            var options = await Http.GetFromJsonAsync<object>($"/api/authenticators/options?username={HttpUtility.UrlEncode(model.Email)}");
            var credential = await module.InvokeAsync<object>("makeAssertion", new object[] { options });
            if (credential is not null)
            {
                var result = await Http.PostAsJsonAsync("/api/login/fido", credential);
                result.EnsureSuccessStatusCode();
                var user = await result.Content.ReadFromJsonAsync<User>();
                Auth.SetUser(user);
                NavigationManager.NavigateTo("/");
            }
        }
        catch (JSException e)
        {
            Logger.LogError(e.Message);
            Logger.LogError(e.StackTrace);
        }
        catch (HttpRequestException e)
        {
            Logger.LogError(e.Message);
        }
        finally
        {
            triedFido = true;
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Pages/SignIn.razor.js");
        }
    }

    public ValueTask DisposeAsync() => module.DisposeAsync();

}
