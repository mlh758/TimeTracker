@page "/groups/{Id:int}/edit"
@using VM = TimeTrack.Shared.ViewModels
@using TimeTrack.Client.Components
@using TimeTrack.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Edit Group</PageTitle>
<MudText Typo="Typo.h1">Edit Group</MudText>

@if (loadError)
{
    <MudAlert Severity="Severity.Error">Unable to load this group.</MudAlert>
}

@if (notFound)
{
    <MudAlert Severity="Severity.Warning">Unable to find this group. Check the My Groups page.</MudAlert>
}

@if (saveError)
{
    <MudAlert Severity="Severity.Error">Unable to save your changes. The group has not been modified.</MudAlert>
}

@if (form is not null)
{
    <GroupEditor Model="form" OnSubmit="OnValidSubmit" />
}

@code {
    [Parameter]
    public int Id { get; set; }

    GroupForm? form;

    bool loadError = false;
    bool notFound = false;
    bool saveError = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var group = await Http.GetFromJsonAsync<VM.Group>($"/api/Groups/{Id}");
            form = new GroupForm()
                {
                    Name = group.Name,
                    Clients = group.Clients.ToList(),
                };
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                notFound = true;
            }
            else
            {
                loadError = true;
            }
        }
    }

    async Task OnValidSubmit(GroupForm form)
    {
        var response = await Http.PutAsync($"/api/groups/{Id}", JsonContent.Create(form));
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/groups/{Id}");
        }
        else
        {
            saveError = true;
        }
    }
}
