@page "/clients/new"
@using TimeTrack.Shared
@using VM = TimeTrack.Shared.ViewModels
@using TimeTrack.Shared.Models
@using TimeTrack.Client.Components
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>New Client</PageTitle>

<MudText Typo="Typo.h1">New Client</MudText>

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <MudTextField Label="Client Abbreviation" @bind-Value="model.Abbreviation" />
    <DataAnnotationsValidator />

    @if (categories is not null)
    {
        <CategorySelect Label="Treatment Setting" Categories="ofType(CategoryType.TreatmentSetting)" @bind-Value="@model.Setting" />
        <CategorySelect Label="Age" Categories="ofType(CategoryType.Age)" @bind-Value="@model.Age" />
        <CategorySelect Label="Race" Categories="ofType(CategoryType.Race)" @bind-Value="@model.Race" />
        <CategorySelect Label="Gender" Categories="ofType(CategoryType.Gender)" @bind-Value="@model.Gender" />
        <CategorySelect Label="Sexual Orientation" Categories="ofType(CategoryType.SexualOrientation)" @bind-Value="@model.SexualOrientation" />
        <CategorySelect Label="Disabilities" Categories="ofType(CategoryType.Disability)" @bind-SelectedValues="@model.Disabilities" Multiple />
    } else {
        <MudSkeleton Width="100%" Height="600px" />
    }

    <ValidationSummary />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-2">Save Client</MudButton>
</EditForm>

@code {
    NewClientForm model = new NewClientForm();
    VM.Category[]? categories;

    async Task OnValidSubmit()
    {
        var response = await Http.PostAsync("/api/clients", JsonContent.Create(model));
        if (response.IsSuccessStatusCode) {
            NavigationManager.NavigateTo("/clients");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<VM.Category[]>("/api/Categories");
    }

    List<VM.Category> ofType(CategoryType t) {
        return categories!.Where(c => c.Type == t).ToList();
    }
}
