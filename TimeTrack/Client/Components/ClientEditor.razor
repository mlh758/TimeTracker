@using TimeTrack.Shared
@using VM = TimeTrack.Shared.ViewModels
@using TimeTrack.Shared.Enums
@inject HttpClient Http


<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <MudTextField Label="Client Abbreviation" @bind-Value="Model.Abbreviation" />
    <DataAnnotationsValidator />

    @if (categories is not null)
    {
        <MudSelect Label="Treatment Setting" @bind-Value=@Model.Setting T="VM.Category">
            @foreach (var item in ofType(CategoryType.TreatmentSetting))
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
        <MudSelect Label="Age" @bind-Value=@Model.Age T="VM.Category">
            @foreach (var item in ofType(CategoryType.Age))
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
        <MudSelect Label="Race" @bind-Value=@Model.Race T="VM.Category">
            @foreach (var item in ofType(CategoryType.Race))
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
        <MudSelect Label="Gender" @bind-Value=@Model.Gender T="VM.Category">
            @foreach (var item in ofType(CategoryType.Gender))
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
        <MudSelect Label="Sexual Orientation" @bind-Value=@Model.SexualOrientation T="VM.Category">
            @foreach (var item in ofType(CategoryType.SexualOrientation))
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
        <MudSelect Label="Disabilities" @bind-SelectedValues=@Model.Disabilities T="VM.Category" MultiSelection>
            @foreach (var item in ofType(CategoryType.Disability))
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
    }
    else
    {
        <MudSkeleton Width="100%" Height="600px" />
    }

    <ValidationSummary />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-2">Save Client</MudButton>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public NewClientForm Model { get; set; } = null!;

    [Parameter]
    public EventCallback<NewClientForm> OnSubmit { get; set; }

    VM.Category[]? categories;
    VM.Category[]? customCategories;

    async Task OnValidSubmit()
    {
        await OnSubmit.InvokeAsync(Model);
    }

    protected override async Task OnInitializedAsync()
    {
        var categoryTask = Http.GetFromJsonAsync<VM.Category[]>("/api/Categories");
        var customTask = Http.GetFromJsonAsync<VM.Category[]>("/api/CustomCategories");
        categories = await categoryTask;
        customCategories = await customTask;
    }

    IEnumerable<VM.Category> ofType(CategoryType t)
    {
        return customCategories!.Where(c => c.Type == t).Concat(categories!.Where(c => c.Type == t));
    }
}
