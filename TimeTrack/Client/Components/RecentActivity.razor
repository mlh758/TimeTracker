@using TimeTrack.Client.Services
@using TimeTrack.Shared.ViewModels
@using TimeTrack.Shared.Enums
@using TimeTrack.Client.Components
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h1">Recent Activity</MudText>
<div class="container">
    <div class="recent">
        <MudStack>
            <p class="list-title">Activity on @selectedDate.ToString("dddd, dd MMM yyy")</p>
            @if (showError)
            {
                <MudAlert Severity="Severity.Error">Unable to load activity for selected day.</MudAlert>
            }
            @foreach (var activity in todayActivity)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary">@activity.Owner.Name.Substring(0,1)</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@activity.Owner.Name</MudText>
                            <MudText Typo="Typo.body2">@((new TimeSpan(0, activity.Duration, 0)).TotalHours) hour(s)</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList>
                            @foreach (var assessment in activity.Assessments!)
                            {
                                <MudListItem Text="@assessment.Name" />
                            }
                        </MudList>
                    </MudCardContent>
                    <MudCardActions>
                        <div class="action-buttons-container">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="@(_ => DeleteActivity(activity.Id, ActivityDelete.This))" />
                            @if(activity.IsScheduled)
                            {
                                <div>
                                    <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="@(_ => DeleteActivity(activity.Id, ActivityDelete.Future))">Future Activity</MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="@(_ => DeleteActivity(activity.Id, ActivityDelete.Schedule))">This Schedule</MudButton>
                                </div>
                            }
                        </div>

                    </MudCardActions>
                </MudCard>
            }
        </MudStack>
    </div>
    <div class="recent calendar-container">
        <section>
            <div class="calendar">
                @foreach (var day in days)
                {
                    <span>@day</span>
                }
            </div>
            <div class="calendar calendar-bg border-solit border-2 mud-border-primary rounded mud-elevation-4">
                @foreach (var day in new MonthRange(currentMonth))
                {
                    <button class=@ButtonClass(day) @onclick="@(() => SetSelectedDay(day))" disabled=@Disabled(day)>
                        <time datetime="@day.Date.ToString("yyyy-MM-dd")">@day.Day</time>
                    </button>
                }
            </div>
        </section>
        <form @onsubmit="HandleMonthChange">
            <div class="pick-month">
                <MudTextField T="DateTime" Format="yyyy-MM-dd" Label="Change month and year" InputType="InputType.Date" @bind-Value="nextDate" />
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Go</MudButton>
            </div>
        </form>
    </div>
</div>


@code {
    private SummaryActivity[] activity = { };
    private SummaryActivity[] todayActivity = { };
    private DateTime currentMonth = DateTime.Today;
    private DateTime selectedDate = DateTime.Today;
    private DateTime nextDate = DateTime.Today;
    private bool showError = false;
    private List<string> days = new() { "S", "M", "T", "W", "T", "F", "S" };

    protected override async Task OnInitializedAsync()
    {
        await GetActivities();
    }

    private async Task DeleteActivity(long Id, ActivityDelete mode)
    {
        var parameters = new DialogParameters();
        switch (mode)
        {
            case ActivityDelete.This:
                parameters.Add("Message", "Do you really want to delete this activity?");
                break;
            case ActivityDelete.Future:
                parameters.Add("Message", "You are about to delete this and future activities in this schedule. Are you sure?");
                break;
            case ActivityDelete.Schedule:
                parameters.Add("Message", "You are about to delete all activities from this schedule, including past activity. Are you sure?");
                break;
        }
        var dialog = DialogService.Show<ConfirmDeleteDialog>("Delete Activity", parameters);
        var confirmed = await dialog.Result;
        if (!confirmed.Cancelled)
        {
            var result = await Http.DeleteAsync($"/api/activities/{Id}?mode={mode}");
            if (!result.IsSuccessStatusCode)
            {
                Snackbar.Add("Unable to delete activity", Severity.Error);
            }
            else
            {
                await GetActivities();
            }
        }


    }
    private async Task GetActivities()
    {
        try
        {
            var newActivity = await Http.GetFromJsonAsync<SummaryActivity[]>($"/api/activities?within={selectedDate.ToString("O")}");
            if (newActivity is not null)
            {
                activity = newActivity;
                todayActivity = FilterActivity(selectedDate);
            }
        }
        catch (HttpRequestException)
        {
            showError = true;
        }

    }

    private string ButtonClass(DateTime date)
    {
        var classes = HasActivity(date) ? "teal lighten-4" : "white-bg";
        if (date.Date == selectedDate.Date)
        {
            classes = classes + " selected-day";
        }
        return classes;
    }

    private bool HasActivity(DateTime date)
    {
        return activity.Any(a => a.Start.Date == date.Date);
    }

    private SummaryActivity[] FilterActivity(DateTime date)
    {
        return activity.Where(a => a.Start.Date == date.Date).ToArray();
    }

    private void SetSelectedDay(DateTime date)
    {
        selectedDate = date;
        todayActivity = FilterActivity(date);
    }

    private bool Disabled(DateTime date)
    {
        return date.Month != currentMonth.Month;
    }

    private async Task HandleMonthChange()
    {
        selectedDate = nextDate;
        currentMonth = nextDate;
        await GetActivities();
    }
}
